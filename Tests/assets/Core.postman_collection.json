{
	"info": {
		"_postman_id": "39418ab0-86c0-265e-a8c5-9a4517e5a5ea",
		"name": "Core",
		"description": "Test for Core API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Roles",
			"description": "Api for user roles",
			"item": [
				{
					"name": "Get Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "006a4d7e-fc26-49a3-a540-6a7f619c67c7",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"There is more than one result\", function(){",
									"    pm.expect(responseData.length).to.above(1);",
									"})",
									"",
									"var role = _.filter(responseData,{'Reference':pm.environment.get('AdminRoleRef')});",
									"",
									"pm.test (\"Role with reference '\"+pm.environment.get('AdminRoleRef')+\"' exist\", function(){",
									"    pm.expect(role.length).to.be.equal(1);",
									"})",
									"",
									"pm.test (\"Data of role '4S7KP8WA' are correct\", function(){",
									"    pm.expect(role[0].Name).to.be.equal('Admin');",
									"    pm.expect(role[0].Priority).to.be.equal(0);",
									"    pm.expect(role[0].IsFrozen).to.be.equal(false);",
									"    pm.expect(role[0].IsActive).to.be.equal(true);",
									"    pm.expect(role[0].Permissions).to.be.an('Array');",
									"    pm.expect(role[0].Permissions.length).to.be.above(6);",
									"    pm.expect(role[0].Permissions[0]).to.have.all.keys([\"Code\",\"Type\",\"Value\",\"Priority\",\"RoleReference\"]);",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CurrentSubsidiary",
								"value": "{{CurrentSubsidiary}}"
							},
							{
								"key": "CurrentLanguage",
								"value": "fr"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/roles",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"roles"
							]
						},
						"description": "Récuparation de la liste des rôles"
					},
					"response": []
				}
			]
		},
		{
			"name": "Currencies",
			"description": "API for currencies",
			"item": [
				{
					"name": "Get currencies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "751b86e4-efa5-4af0-a302-4ba1022763ae",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"There is 3 results\", function(){",
									"    pm.expect(responseData.length).to.eql(3);",
									"});",
									"",
									"var expectedCurr =",
									"[",
									"    {",
									"         \"Code\": \"USD\",",
									"        \"Name\": \"Dollar ($)\"",
									"    },",
									"    {",
									"         \"Code\": \"EUR\",",
									"        \"Name\": \"Euro (€)\"",
									"    },",
									"    {",
									"        \"Code\": \"GBP\",",
									"        \"Name\": \"Livre (£)\"",
									"    }",
									"];",
									"",
									"",
									"var returnedCurrencies= _.map(responseData,function(currency){",
									"    return {'Code':currency.Code,'Name':currency.Name};",
									"});",
									"    ",
									"",
									"pm.test(\"Data for currency are correct\",function(){",
									"   pm.expect(returnedCurrencies).to.be.eql(expectedCurr)",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CurrentLanguage",
								"value": "fr"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/currencies",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"currencies"
							]
						},
						"description": "Get currencies"
					},
					"response": [
						{
							"id": "b460e5f4-afbb-4561-953c-5995e1512676",
							"name": "Get currencies",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{CoreURL}}/api/configuration/currencies",
									"host": [
										"{{CoreURL}}"
									],
									"path": [
										"api",
										"configuration",
										"currencies"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "4416",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 11 Jan 2018 12:47:55 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Expires",
									"value": "-1",
									"name": "Expires",
									"description": "Gives the date/time after which the response is considered stale"
								},
								{
									"key": "Pragma",
									"value": "no-cache",
									"name": "Pragma",
									"description": "Implementation-specific headers that may have various effects anywhere along the request-response chain."
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "X-AspNet-Version",
									"value": "4.0.30319",
									"name": "X-AspNet-Version",
									"description": "Custom header"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET",
									"name": "X-Powered-By",
									"description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
								},
								{
									"key": "x-config-header",
									"value": "{\"UserLogin\":\"00000000\",\"UserReference\":\"00000000\",\"TenantReference\":\"00000000\",\"Environment\":\"Tests\",\"DatabaseCore\":\"itclients-dev-sql.database.windows.net/itclients-core-test\",\"DatabaseShared\":\"itclients-dev-sql.database.windows.net/itclients-1-test\",\"Version\":\"green-dev-201712-033\"}",
									"name": "x-config-header",
									"description": "Custom header"
								}
							],
							"cookie": [
								{
									"expires": "Tue Jan 19 2038 04:14:07 GMT+0100 (Europe centrale)",
									"httpOnly": true,
									"domain": "itclients-api-core-test-green.azurewebsites.net",
									"path": "/",
									"secure": false,
									"value": "91aced05e7bfcba071b08552743d98620b45e59ed3c0e6957468d0f97051ef7b",
									"key": "ARRAffinity"
								}
							],
							"body": "[{\"Reference\":\"EUZQRX2M\",\"Code\":\"ALL\",\"Name\":\"Albania Lek\"},{\"Reference\":\"9ENKFP28\",\"Code\":\"DZD\",\"Name\":\"Algeria Dinar\"},{\"Reference\":\"CYEWYUWI\",\"Code\":\"AOA\",\"Name\":\"Angola Kwanza\"},{\"Reference\":\"E4DK5OJ8\",\"Code\":\"ARS\",\"Name\":\"Argentina Peso\"},{\"Reference\":\"E8CCV66L\",\"Code\":\"AMD\",\"Name\":\"Armenia Dram\"},{\"Reference\":\"14VFJFWA\",\"Code\":\"AWG\",\"Name\":\"Aruba Guilder\"},{\"Reference\":\"P89E3N82\",\"Code\":\"AUD\",\"Name\":\"Australia Dollar\"},{\"Reference\":\"M95CEFXX\",\"Code\":\"AZN\",\"Name\":\"Azerbaijan Manat\"},{\"Reference\":\"VSVCGJ6J\",\"Code\":\"BSD\",\"Name\":\"Bahamas Dollar\"},{\"Reference\":\"1LS6SMLA\",\"Code\":\"BHD\",\"Name\":\"Bahrain Dinar\"},{\"Reference\":\"NAUIST7H\",\"Code\":\"BDT\",\"Name\":\"Bangladesh Taka\"},{\"Reference\":\"27T5T57Q\",\"Code\":\"BBD\",\"Name\":\"Barbados Dollar\"},{\"Reference\":\"7C77TSEX\",\"Code\":\"BYN\",\"Name\":\"Belarus Ruble\"},{\"Reference\":\"REDUTIN9\",\"Code\":\"BZD\",\"Name\":\"Belize Dollar\"},{\"Reference\":\"EEJIQ0NR\",\"Code\":\"BMD\",\"Name\":\"Bermuda Dollar\"},{\"Reference\":\"Y337VVLT\",\"Code\":\"BTN\",\"Name\":\"Bhutan Ngultrum\"},{\"Reference\":\"ZCU1XMWP\",\"Code\":\"BOB\",\"Name\":\"Bolivia Bol?viano\"},{\"Reference\":\"BRFF5TGU\",\"Code\":\"BAM\",\"Name\":\"Bosnia and Herzegovina Convertible Marka\"},{\"Reference\":\"E5AMKPRU\",\"Code\":\"BWP\",\"Name\":\"Botswana Pula\"},{\"Reference\":\"UYN5A9W1\",\"Code\":\"BRL\",\"Name\":\"Brazil Real\"},{\"Reference\":\"5938TGMM\",\"Code\":\"BND\",\"Name\":\"Brunei Darussalam Dollar\"},{\"Reference\":\"8VTNRHZF\",\"Code\":\"BGN\",\"Name\":\"Bulgaria Lev\"},{\"Reference\":\"PRNCTN0H\",\"Code\":\"BIF\",\"Name\":\"Burundi Franc\"},{\"Reference\":\"EXNEJHE5\",\"Code\":\"KHR\",\"Name\":\"Cambodia Riel\"},{\"Reference\":\"OTIVPVJ5\",\"Code\":\"CAD\",\"Name\":\"Canada Dollar\"},{\"Reference\":\"UTGO275U\",\"Code\":\"CVE\",\"Name\":\"Cape Verde Escudo\"},{\"Reference\":\"A429GQP2\",\"Code\":\"KYD\",\"Name\":\"Cayman Islands Dollar\"},{\"Reference\":\"JJHKIOK9\",\"Code\":\"CLP\",\"Name\":\"Chile Peso\"},{\"Reference\":\"HHTU58PG\",\"Code\":\"CNY\",\"Name\":\"China Yuan Renminbi\"},{\"Reference\":\"EM2835KC\",\"Code\":\"COP\",\"Name\":\"Colombia Peso\"},{\"Reference\":\"BGLVISGB\",\"Code\":\"XOF\",\"Name\":\"Communaut? Financi?re Africaine (BCEAO)\"},{\"Reference\":\"4SV7HHLK\",\"Code\":\"XAF\",\"Name\":\"Communaut? Financi?re Africaine (BEAC)\"},{\"Reference\":\"KQZJ8Y8P\",\"Code\":\"KMF\",\"Name\":\"Comorian Franc\"},{\"Reference\":\"3UC8INA9\",\"Code\":\"XPF\",\"Name\":\"Comptoirs Fran?ais du Pacifique (CFP)\"},{\"Reference\":\"WSZW7130\",\"Code\":\"CDF\",\"Name\":\"Congo/Kinshasa Franc\"},{\"Reference\":\"TK3SAAIS\",\"Code\":\"CRC\",\"Name\":\"Costa Rica Colon\"},{\"Reference\":\"LVXB1P7I\",\"Code\":\"HRK\",\"Name\":\"Croatia Kuna\"},{\"Reference\":\"54ES1412\",\"Code\":\"CUC\",\"Name\":\"Cuba Convertible Peso\"},{\"Reference\":\"904YESK7\",\"Code\":\"CUP\",\"Name\":\"Cuba Peso\"},{\"Reference\":\"61JYWPGP\",\"Code\":\"CZK\",\"Name\":\"Czech Republic Koruna\"},{\"Reference\":\"AIXUAZM7\",\"Code\":\"DKK\",\"Name\":\"Denmark Krone\"},{\"Reference\":\"177ECVI6\",\"Code\":\"DJF\",\"Name\":\"Djibouti Franc\"},{\"Reference\":\"X1ZNE06G\",\"Code\":\"DOP\",\"Name\":\"Dominican Republic Peso\"},{\"Reference\":\"AZFUD7A8\",\"Code\":\"XCD\",\"Name\":\"East Caribbean Dollar\"},{\"Reference\":\"GRHG2UDM\",\"Code\":\"EGP\",\"Name\":\"Egypt Pound\"},{\"Reference\":\"QYZVBR0W\",\"Code\":\"SVC\",\"Name\":\"El Salvador Colon\"},{\"Reference\":\"VKOSH2JU\",\"Code\":\"ERN\",\"Name\":\"Eritrea Nakfa\"},{\"Reference\":\"HI558J1G\",\"Code\":\"ETB\",\"Name\":\"Ethiopia Birr\"},{\"Reference\":\"00000000\",\"Code\":\"EUR\",\"Name\":\"Euro Member Countries\"},{\"Reference\":\"5TFYHHQP\",\"Code\":\"FKP\",\"Name\":\"Falkland Islands (Malvinas) Pound\"},{\"Reference\":\"99L3QUVI\",\"Code\":\"FJD\",\"Name\":\"Fiji Dollar\"},{\"Reference\":\"WJ7DPVDQ\",\"Code\":\"GMD\",\"Name\":\"Gambia Dalasi\"},{\"Reference\":\"JOX1O5AA\",\"Code\":\"GEL\",\"Name\":\"Georgia Lari\"},{\"Reference\":\"FVJE0U1K\",\"Code\":\"GHS\",\"Name\":\"Ghana Cedi\"},{\"Reference\":\"FO23ZWL7\",\"Code\":\"GIP\",\"Name\":\"Gibraltar Pound\"},{\"Reference\":\"CHQ8CP0M\",\"Code\":\"GTQ\",\"Name\":\"Guatemala Quetzal\"},{\"Reference\":\"UG3SZ4U5\",\"Code\":\"GGP\",\"Name\":\"Guernsey Pound\"},{\"Reference\":\"9AUFU8BO\",\"Code\":\"GNF\",\"Name\":\"Guinea Franc\"},{\"Reference\":\"D0GT1IDC\",\"Code\":\"GYD\",\"Name\":\"Guyana Dollar\"},{\"Reference\":\"FROLSOGY\",\"Code\":\"HTG\",\"Name\":\"Haiti Gourde\"},{\"Reference\":\"J6MZHZDW\",\"Code\":\"HNL\",\"Name\":\"Honduras Lempira\"},{\"Reference\":\"VQF2GWC4\",\"Code\":\"HKD\",\"Name\":\"Hong Kong Dollar\"},{\"Reference\":\"MCXZQNDI\",\"Code\":\"HUF\",\"Name\":\"Hungary Forint\"},{\"Reference\":\"GDZVSY97\",\"Code\":\"ISK\",\"Name\":\"Iceland Krona\"},{\"Reference\":\"T8BSZWFG\",\"Code\":\"INR\",\"Name\":\"India Rupee\"},{\"Reference\":\"Q5O4Z93Y\",\"Code\":\"IDR\",\"Name\":\"Indonesia Rupiah\"},{\"Reference\":\"EHSROQ0F\",\"Code\":\"XDR\",\"Name\":\"International Monetary Fund (IMF)\"},{\"Reference\":\"DA94VPI6\",\"Code\":\"IRR\",\"Name\":\"Iran Rial\"},{\"Reference\":\"WGD4DDYX\",\"Code\":\"IQD\",\"Name\":\"Iraq Dinar\"},{\"Reference\":\"CSW4PESM\",\"Code\":\"IMP\",\"Name\":\"Isle of Man Pound\"},{\"Reference\":\"LVNDY93V\",\"Code\":\"ILS\",\"Name\":\"Israel Shekel\"},{\"Reference\":\"6EZYF3SD\",\"Code\":\"JMD\",\"Name\":\"Jamaica Dollar\"},{\"Reference\":\"JYDZ9K0H\",\"Code\":\"JPY\",\"Name\":\"Japan Yen\"},{\"Reference\":\"CNUEH3KH\",\"Code\":\"JEP\",\"Name\":\"Jersey Pound\"},{\"Reference\":\"G1A94HY0\",\"Code\":\"JOD\",\"Name\":\"Jordan Dinar\"},{\"Reference\":\"04X2GJFK\",\"Code\":\"KZT\",\"Name\":\"Kazakhstan Tenge\"},{\"Reference\":\"1YZYIANP\",\"Code\":\"KES\",\"Name\":\"Kenya Shilling\"},{\"Reference\":\"HXT0PJEK\",\"Code\":\"KPW\",\"Name\":\"Korea (North) Won\"},{\"Reference\":\"FZHIV93U\",\"Code\":\"KRW\",\"Name\":\"Korea (South) Won\"},{\"Reference\":\"H9F0Y1FL\",\"Code\":\"KWD\",\"Name\":\"Kuwait Dinar\"},{\"Reference\":\"HT1AEKNZ\",\"Code\":\"KGS\",\"Name\":\"Kyrgyzstan Som\"},{\"Reference\":\"34P4S95X\",\"Code\":\"LAK\",\"Name\":\"Laos Kip\"},{\"Reference\":\"TFD91I3Q\",\"Code\":\"LBP\",\"Name\":\"Lebanon Pound\"},{\"Reference\":\"Z9WG8XEQ\",\"Code\":\"LSL\",\"Name\":\"Lesotho Loti\"},{\"Reference\":\"2IFLH5BG\",\"Code\":\"LRD\",\"Name\":\"Liberia Dollar\"},{\"Reference\":\"UHP6YCFK\",\"Code\":\"LYD\",\"Name\":\"Libya Dinar\"},{\"Reference\":\"C60ZZT9F\",\"Code\":\"MOP\",\"Name\":\"Macau Pataca\"},{\"Reference\":\"AMJE2KA2\",\"Code\":\"MKD\",\"Name\":\"Macedonia Denar\"},{\"Reference\":\"MEYBGCUA\",\"Code\":\"MGA\",\"Name\":\"Madagascar Ariary\"},{\"Reference\":\"SX89YJ5Q\",\"Code\":\"MWK\",\"Name\":\"Malawi Kwacha\"},{\"Reference\":\"AVPHFCVB\",\"Code\":\"MYR\",\"Name\":\"Malaysia Ringgit\"},{\"Reference\":\"7V40APTA\",\"Code\":\"MVR\",\"Name\":\"Maldives (Maldive Islands) Rufiyaa\"},{\"Reference\":\"V6PE44TC\",\"Code\":\"MRO\",\"Name\":\"Mauritania Ouguiya\"},{\"Reference\":\"5FQMRA3Z\",\"Code\":\"MUR\",\"Name\":\"Mauritius Rupee\"},{\"Reference\":\"HFMIC3QZ\",\"Code\":\"MXN\",\"Name\":\"Mexico Peso\"},{\"Reference\":\"F9V9DITW\",\"Code\":\"MDL\",\"Name\":\"Moldova Leu\"},{\"Reference\":\"OH005D34\",\"Code\":\"MNT\",\"Name\":\"Mongolia Tughrik\"},{\"Reference\":\"968IUZ04\",\"Code\":\"MAD\",\"Name\":\"Morocco Dirham\"},{\"Reference\":\"06R7HL9C\",\"Code\":\"MZN\",\"Name\":\"Mozambique Metical\"},{\"Reference\":\"OHEBNFQC\",\"Code\":\"MMK\",\"Name\":\"Myanmar (Burma) Kyat\"},{\"Reference\":\"OCMB3BSH\",\"Code\":\"NAD\",\"Name\":\"Namibia Dollar\"},{\"Reference\":\"MHCV086C\",\"Code\":\"NPR\",\"Name\":\"Nepal Rupee\"},{\"Reference\":\"XY44YK4P\",\"Code\":\"ANG\",\"Name\":\"Netherlands Antilles Guilder\"},{\"Reference\":\"9QHCLOMR\",\"Code\":\"NZD\",\"Name\":\"New Zealand Dollar\"},{\"Reference\":\"8CGA1ZBR\",\"Code\":\"NIO\",\"Name\":\"Nicaragua Cordoba\"},{\"Reference\":\"J1YITB71\",\"Code\":\"NGN\",\"Name\":\"Nigeria Naira\"},{\"Reference\":\"YY9BHF7D\",\"Code\":\"NOK\",\"Name\":\"Norway Krone\"},{\"Reference\":\"G9USH50Y\",\"Code\":\"OMR\",\"Name\":\"Oman Rial\"},{\"Reference\":\"CAZTHD32\",\"Code\":\"PKR\",\"Name\":\"Pakistan Rupee\"},{\"Reference\":\"3WEBVIRJ\",\"Code\":\"PAB\",\"Name\":\"Panama Balboa\"},{\"Reference\":\"PLYILSHM\",\"Code\":\"PGK\",\"Name\":\"Papua New Guinea Kina\"},{\"Reference\":\"9ANSGLU2\",\"Code\":\"PYG\",\"Name\":\"Paraguay Guarani\"},{\"Reference\":\"VA5QX4IF\",\"Code\":\"PEN\",\"Name\":\"Peru Sol\"},{\"Reference\":\"XINHE8YB\",\"Code\":\"PHP\",\"Name\":\"Philippines Peso\"},{\"Reference\":\"ZSDDWA9K\",\"Code\":\"PLN\",\"Name\":\"Poland Zloty\"},{\"Reference\":\"QH02R8ZQ\",\"Code\":\"QAR\",\"Name\":\"Qatar Riyal\"},{\"Reference\":\"D5UA3SV8\",\"Code\":\"RON\",\"Name\":\"Romania Leu\"},{\"Reference\":\"LNNXEP7S\",\"Code\":\"RUB\",\"Name\":\"Russia Ruble\"},{\"Reference\":\"1DUC60LA\",\"Code\":\"RWF\",\"Name\":\"Rwanda Franc\"},{\"Reference\":\"8Q31KGCO\",\"Code\":\"STD\",\"Name\":\"S?o Tom? and Pr?ncipe Dobra\"},{\"Reference\":\"CZ6QIV8L\",\"Code\":\"SHP\",\"Name\":\"Saint Helena Pound\"},{\"Reference\":\"XMARG4MG\",\"Code\":\"WST\",\"Name\":\"Samoa Tala\"},{\"Reference\":\"OVUEUSSI\",\"Code\":\"SAR\",\"Name\":\"Saudi Arabia Riyal\"},{\"Reference\":\"XSIQTZXM\",\"Code\":\"RSD\",\"Name\":\"Serbia Dinar\"},{\"Reference\":\"3RDFOSMM\",\"Code\":\"SCR\",\"Name\":\"Seychelles Rupee\"},{\"Reference\":\"9QEGOOOH\",\"Code\":\"SLL\",\"Name\":\"Sierra Leone Leone\"},{\"Reference\":\"TCRM7ZGI\",\"Code\":\"SGD\",\"Name\":\"Singapore Dollar\"},{\"Reference\":\"2QQ3OMU5\",\"Code\":\"SBD\",\"Name\":\"Solomon Islands Dollar\"},{\"Reference\":\"6T8HJJCG\",\"Code\":\"SOS\",\"Name\":\"Somalia Shilling\"},{\"Reference\":\"SCY4SUG4\",\"Code\":\"ZAR\",\"Name\":\"South Africa Rand\"},{\"Reference\":\"04281QBW\",\"Code\":\"LKR\",\"Name\":\"Sri Lanka Rupee\"},{\"Reference\":\"Z9CIJUGF\",\"Code\":\"SDG\",\"Name\":\"Sudan Pound\"},{\"Reference\":\"PKOQROC1\",\"Code\":\"SRD\",\"Name\":\"Suriname Dollar\"},{\"Reference\":\"LOIZXJGA\",\"Code\":\"SZL\",\"Name\":\"Swaziland Lilangeni\"},{\"Reference\":\"IR469N0J\",\"Code\":\"SEK\",\"Name\":\"Sweden Krona\"},{\"Reference\":\"LU8FEFMA\",\"Code\":\"CHF\",\"Name\":\"Switzerland Franc\"},{\"Reference\":\"FMEVYNSI\",\"Code\":\"SYP\",\"Name\":\"Syria Pound\"},{\"Reference\":\"J778YI8V\",\"Code\":\"TWD\",\"Name\":\"Taiwan New Dollar\"},{\"Reference\":\"HHA6WMHL\",\"Code\":\"TJS\",\"Name\":\"Tajikistan Somoni\"},{\"Reference\":\"DAKAOMA0\",\"Code\":\"TZS\",\"Name\":\"Tanzania Shilling\"},{\"Reference\":\"HPSKUY8T\",\"Code\":\"THB\",\"Name\":\"Thailand Baht\"},{\"Reference\":\"F6LINXBY\",\"Code\":\"TOP\",\"Name\":\"Tonga Pa'anga\"},{\"Reference\":\"WYPYYDBG\",\"Code\":\"TTD\",\"Name\":\"Trinidad and Tobago Dollar\"},{\"Reference\":\"VOJLY8QK\",\"Code\":\"TND\",\"Name\":\"Tunisia Dinar\"},{\"Reference\":\"XQFE3015\",\"Code\":\"TRY\",\"Name\":\"Turkey Lira\"},{\"Reference\":\"YLS4MASZ\",\"Code\":\"TMT\",\"Name\":\"Turkmenistan Manat\"},{\"Reference\":\"8H1MAKFN\",\"Code\":\"TVD\",\"Name\":\"Tuvalu Dollar\"},{\"Reference\":\"QOXVDZ3S\",\"Code\":\"UGX\",\"Name\":\"Uganda Shilling\"},{\"Reference\":\"EX8EQ23U\",\"Code\":\"UAH\",\"Name\":\"Ukraine Hryvnia\"},{\"Reference\":\"DM8PJ33P\",\"Code\":\"GBP\",\"Name\":\"United Kingdom Pound\"},{\"Reference\":\"00000001\",\"Code\":\"USD\",\"Name\":\"United States Dollar\"},{\"Reference\":\"8T34I0KJ\",\"Code\":\"UYU\",\"Name\":\"Uruguay Peso\"},{\"Reference\":\"9V63WQ4D\",\"Code\":\"UZS\",\"Name\":\"Uzbekistan Som\"},{\"Reference\":\"LD7F66TV\",\"Code\":\"VUV\",\"Name\":\"Vanuatu Vatu\"},{\"Reference\":\"Y439HWRQ\",\"Code\":\"VEF\",\"Name\":\"Venezuela Bol?var\"},{\"Reference\":\"SX7TAGWM\",\"Code\":\"VND\",\"Name\":\"Viet Nam Dong\"},{\"Reference\":\"FHO1GB1X\",\"Code\":\"YER\",\"Name\":\"Yemen Rial\"},{\"Reference\":\"DIV3O40Q\",\"Code\":\"ZMW\",\"Name\":\"Zambia Kwacha\"},{\"Reference\":\"0MH4MZAS\",\"Code\":\"ZWD\",\"Name\":\"Zimbabwe Dollar\"}]"
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"description": "",
			"item": [
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc685b0e-933c-4e93-b00c-2ce0a19752fe",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"There is more than 5 results\", function(){",
									"    pm.expect(responseData.length).to.above(4);",
									"});",
									"",
									"var subsidiaryAdminLogin = pm.environment.get('User')",
									"var subsAdmin = _.filter(responseData,{'Login':subsidiaryAdminLogin})",
									"",
									"pm.test(\"User '\"+subsidiaryAdminLogin+\"' is present\", function(){",
									"    pm.expect(subsAdmin.length).to.be.equal(1);",
									"})",
									"",
									"pm.test (\"Data for user '\"+subsidiaryAdminLogin+\"' are correct\", function(){",
									"    pm.expect(subsAdmin[0].Reference).to.be.equal(pm.environment.get('UserRef'));",
									"    pm.expect(subsAdmin[0].LastName).to.contain('Tenant',pm.environment.get('CurrentTenant'));",
									"    pm.expect(subsAdmin[0].FirstName).to.be.equal('Utilisateur');",
									"    pm.expect(subsAdmin[0].TenantReference).to.be.equal(pm.environment.get('CurrentTenant'));",
									"    pm.expect(subsAdmin[0].IsActive).to.be.equal(true);",
									"    pm.expect(subsAdmin[0].DefaultSubsidiaryReference).to.be.equal(pm.environment.get('CurrentSubsidiary'));",
									"    ",
									"    ",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CurrentSubsidiary",
								"value": "{{CurrentSubsidiary}}"
							},
							{
								"key": "CurrentLanguage",
								"value": "fr"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/users",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"users"
							]
						},
						"description": "Get list of user"
					},
					"response": []
				},
				{
					"name": "Get User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "93d1b92f-1d91-408f-b132-0c75d99da37a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16d6bcb3-f95c-4e86-bdea-6b1c3771c6b7",
								"type": "text/javascript",
								"exec": [
									"var moment = require ('moment')",
									"",
									"var responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Data of user with ref '\"+pm.environment.get('UserRef')+\"' are correct\", function () {",
									"    pm.expect (responseData.Reference).to.be.eql(pm.environment.get('UserRef'));",
									"    pm.expect(responseData.TenantReference).to.be.equals(pm.environment.get('CurrentTenant'));",
									"    pm.expect(responseData.DefaultSubsidiaryReference).to.be.equals(pm.environment.get('CurrentSubsidiary'));",
									"    pm.expect(responseData.Login).to.be.equals(pm.environment.get('User'));",
									"    pm.expect(responseData.FirstName).to.be.equals(\"Utilisateur\");",
									"    pm.expect(responseData.LastName).to.contain('Tenant',pm.environment.get('CurrentTenant'));",
									"    pm.expect(responseData.Phone).to.be.equals(\"+33(0)1-02-03-04-05\");",
									"    pm.expect(responseData.EmailAddress).to.be.equals(\"s.carecolin@astonitf.com\");",
									"    pm.expect(responseData.Language).to.be.equals(\"FR\");",
									"    pm.expect(responseData.Function).to.be.equals(\"Président Directeur Général\");",
									"    pm.expect(responseData.TimeZone).to.be.equals(\"UTC+1\");",
									"    var m = moment(responseData.LastConnection);",
									"    pm.expect(m.isValid()).to.be.equals(true);",
									"    pm.expect(responseData.UserSubsidiaries.length).to.be.equals(3);",
									"    pm.expect(responseData.Permissions.length).to.be.above(15);",
									"    pm.expect(responseData.Permissions[0]).to.have.all.keys([\"Code\",\"Type\",\"Value\",\"Priority\",\"RoleReference\"]);",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CurrentSubsidiary",
								"value": "{{CurrentSubsidiary}}"
							},
							{
								"key": "CurrentLanguage",
								"value": "fr"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/users/:userID",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"users",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "{{UserRef}}",
									"description": "Id of the user"
								}
							]
						},
						"description": "Verification du EndPoint Users"
					},
					"response": []
				},
				{
					"name": "Get user Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc7958c9-e773-4141-a2d7-5a1d1c170301",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0f7a638d-253d-43de-baad-42809fb0983b",
								"type": "text/javascript",
								"exec": [
									"var loginPostData = {",
									"  \"Login\": pm.environment.get('User'),",
									"  \"Password\": pm.environment.get('Password')",
									"};",
									"",
									"pm.globals.set (\"LoginPostData\", JSON.stringify(loginPostData))"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{LoginPostData}}"
						},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/users/Tokens",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"users",
								"Tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get users for a subsidiary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "754ce822-2ae6-45f8-8af1-11bd34e8ea6f",
								"type": "text/javascript",
								"exec": [
									"var responseData= JSON.parse(responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"There is more than on result\", function(){",
									"    pm.expect(responseData.length).to.be.above(0)",
									"})",
									"",
									"pm.test(\"Data for user '\"+pm.environment.get('User')+\"' are correct\",function(){",
									"    var currentAdmin= _.filter(responseData,{'Login':pm.environment.get('User')})",
									"    pm.expect (currentAdmin.length).to.be.equal(1);",
									"    pm.expect (currentAdmin[0].Reference).to.be.equal(pm.environment.get('UserRef'));",
									"    pm.expect (currentAdmin[0].LastName).to.contain('Tenant',pm.environment.get('CurrentTenant'));",
									"    pm.expect (currentAdmin[0].FirstName).to.be.equal('Utilisateur');",
									"    pm.expect (currentAdmin[0].TenantReference).to.be.equal(pm.environment.get('CurrentTenant'));",
									"    pm.expect (currentAdmin[0].IsActive).to.be.equal(true);",
									"    pm.expect (currentAdmin[0].DefaultSubsidiaryReference).to.be.equal(pm.environment.get('CurrentSubsidiary'));",
									"})",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CurrentSubsidiary",
								"value": "{{CurrentSubsidiary}}"
							},
							{
								"key": "CurrentLanguage",
								"value": "fr"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/subsidiaries/:subsidiaryReference/users",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"subsidiaries",
								":subsidiaryReference",
								"users"
							],
							"variable": [
								{
									"key": "subsidiaryReference",
									"value": "{{CurrentSubsidiary}}"
								}
							]
						},
						"description": "Get list of authorised user for a given subsidiary"
					},
					"response": []
				}
			]
		},
		{
			"name": "Functions",
			"description": "",
			"item": [
				{
					"name": "Get Functions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f268bb8-b61d-41d7-b6b3-47ac20406abc",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"There is 32 results\", function(){",
									"    pm.expect(responseData.length).to.be.equals(32);",
									"})",
									"",
									"pm.test(\"Function 'Chargé de clientèle' is present\", function(){",
									"    pm.expect(_.filter(responseData,{'Name':'Chargé de clientèle'}).length).to.be.equal(1)",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CurrentSubsidiary",
								"value": "{{CurrentSubsidiary}}"
							},
							{
								"key": "CurrentLanguage",
								"value": "fr"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/functions",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"functions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tenants",
			"description": "",
			"item": [
				{
					"name": "Errors",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d6eaa875-19b8-4235-a662-1e7957e23c41",
								"type": "text/javascript",
								"exec": [
									"var newTenantName= 'API Test Tenant-'+Date.now();",
									"",
									"var tenantData =",
									"{",
									"  \"Name\":newTenantName,",
									"  \"CurrencyReference\": \"00000000\",",
									"  \"IsActive\": true,",
									"  \"TenantAgingBalanceSlices\": [",
									"    {",
									"      \"TenantAgingBalanceSliceReference\": null,",
									"      \"LowValue\": 0,",
									"      \"HighValue\": 30",
									"    },",
									"    {",
									"      \"TenantAgingBalanceSliceReference\": null,",
									"      \"LowValue\": 30,",
									"      \"HighValue\": 60",
									"    }",
									"  ]",
									"};",
									"",
									"pm.globals.set(\"NewTenantData\",JSON.stringify(tenantData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "19bcdf50-17a6-443a-a351-6e5c033f9e99",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse(responseBody);",
									"",
									"pm.globals.set('NewTenantRef', responseData.Reference);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"New Tenant informations are sent\",function(){",
									"   pm.expect(responseData).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Informations sent back are correct\",function(){",
									"   var postedData = JSON.parse (pm.globals.get('NewTenantData'));",
									"   // TODO verify all fields....",
									"   pm.expect(responseData.Name).to.be.equal(postedData.Name);",
									"   pm.expect(responseData.CurrencyReference).to.be.equal(postedData.CurrencyReference);",
									"   pm.expect(responseData.IsActive).to.be.equal(postedData.IsActive);",
									"   pm.expect(responseData.TenantAgingBalanceSlices).to.be.eql(postedData.TenantAgingBalanceSlices);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CurrentLanguage",
								"value": "fr"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{NewTenantData}}"
						},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/tenants",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"tenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "734519ac-fe32-45f7-92ec-fa002e2773fc",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"There is more than one subsidiary in the list\",function(){",
									"    pm.expect(responseData.length).to.be.above(0);",
									"});",
									"",
									"var newTenant = _.filter (responseData,{'Reference':pm.globals.get(\"NewTenantRef\")});",
									"",
									"pm.test(\"There is newly created tenant in the list\",function(){",
									"   pm.expect(newTenant.length).to.be.equal(1);",
									"});",
									"",
									"pm.test(\"Returned data are correct\",function(){",
									"    var postedData = JSON.parse (pm.globals.get('NewTenantData'));",
									"    //TODO change reponseDate by newTenant. ..",
									"    pm.expect(newTenant[0].Code).not.to.be.equal(null);",
									"    pm.expect(newTenant[0].Name).to.be.equal(postedData.Name);",
									"    pm.expect(newTenant[0].IsActive).to.be.equal(postedData.IsActive);",
									"    pm.expect(newTenant[0].StatusLabel).to.be.equal(\"Actif\");",
									"    pm.expect(newTenant[0].CountOfSubsidiaries).to.be.equal(0);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CurrentLanguage",
								"value": "fr"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/tenants",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"tenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9229a172-351f-4660-95d0-8dc9c4da9c43",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"New Tenant informations are sent\",function(){",
									"   pm.expect(responseData).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Informations sent back are correct\",function(){",
									"    var postedData = JSON.parse (pm.globals.get('NewTenantData'));",
									"    pm.expect(responseData.Name).to.be.equal(postedData.Name);",
									"    pm.expect(responseData.CurrencyReference).to.be.equal(postedData.CurrencyReference);",
									"    pm.expect(responseData.IsActive).to.be.equal(postedData.IsActive);",
									"    pm.expect(responseData.TenantAgingBalanceSlices).to.be.eql(postedData.TenantAgingBalanceSlices);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/json, application/xml, text/xml"
							},
							{
								"key": "CurrentLanguage",
								"value": "fr"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/tenants/:TenantReference",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"tenants",
								":TenantReference"
							],
							"variable": [
								{
									"key": "TenantReference",
									"value": "{{NewTenantRef}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6d517337-5330-4bdf-a470-e5882f6455c9",
								"type": "text/javascript",
								"exec": [
									"var updatedTenantName= 'API Test Tenant UDPATED'+Date.now();",
									"pm.globals.set(\"updateTenantName\",updatedTenantName)",
									"",
									"var tenantUpdatedData =",
									"{",
									"  \"Name\":updatedTenantName,",
									"  \"CurrencyReference\": \"00000000\",",
									"  \"IsActive\": false",
									"};",
									"",
									"pm.globals.set(\"UpdatedTenantData\",JSON.stringify(tenantUpdatedData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "88d4504c-8f8a-4444-9dcb-af3508b1a242",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Updated subsidiary informations are sent\",function(){",
									"   pm.expect(responseData).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Informations sent back are correct\",function(){",
									"   var postedData = JSON.parse (pm.globals.get('UpdatedTenantData'));",
									"   pm.expect(responseData.Reference).to.be.equal(pm.globals.get('NewTenantRef'));",
									"   pm.expect(responseData.Name).to.be.equal(postedData.Name);",
									"   pm.expect(responseData.CurrencyReference).to.be.equal(postedData.CurrencyReference);",
									"   pm.expect(responseData.IsActive).to.be.equal(postedData.IsActive);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CurrentLanguage",
								"value": "fr"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{UpdatedTenantData}}"
						},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/tenants/:tenantReference",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"tenants",
								":tenantReference"
							],
							"variable": [
								{
									"key": "tenantReference",
									"value": "{{NewTenantRef}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tenant Subsidiaries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d2c443f-8e94-4995-878a-14bc5395712f",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Number of elements is 0\", function(){",
									"    pm.expect(responseData.length).to.be.equals(0);",
									"});",
									"",
									"// var specificSubs = _.filter(responseData,{'CompanyName':'Altaven-F1'});",
									"",
									"// pm.test(\"Results contains Altaven-F1\", function(){",
									"//     pm.expect(specificSubs.length).to.be.equal(1,'Filiale non trouvée');",
									"// });",
									"",
									"// pm.test(\"Data for subsidiary 'Altaven-F1' are correct\", function(){",
									"//     pm.expect(specificSubs[0].Code).to.be.equal('9L6BW89EA6');",
									"//     pm.expect(specificSubs[0].IsActive).to.be.equal(true,'Statut incorrect');",
									"//     pm.expect(specificSubs[0].AttachedPortfoliosCount).to.be.equal(3, 'Nombre de filiale incorrecte');",
									"//     pm.expect(specificSubs[0].CurrencyCode).to.be.equal('EUR','Devise incorrecte');",
									"//     pm.expect(specificSubs[0].AttachedPortfolios.length).to.be.equal(3, 'Nombre de filiale incorrecte');",
									"// });"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/json, application/xml, text/xml"
							},
							{
								"key": "CurrentLanguage",
								"value": "fr"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/tenants/:reference/subsidiaries",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"tenants",
								":reference",
								"subsidiaries"
							],
							"variable": [
								{
									"key": "reference",
									"value": "{{NewTenantRef}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subsidiaries",
			"description": "",
			"item": [
				{
					"name": "Create Subsidiary",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ec4e11a0-0a47-43ed-ae71-29cec1af3a2a",
								"type": "text/javascript",
								"exec": [
									"moment = require(\"moment\");",
									"",
									"var now =Date.now();",
									"var signatureDate = moment(now).toISOString();",
									"var openingDate = moment(now).add(1,'months').toISOString();",
									"var newSubsidiaryName=  \"Sté&Co-\"+now;",
									" ",
									"var subsidiaryData =",
									"{",
									"  \"TenantReference\":pm.environment.get(\"CurrentTenant\"),",
									"  \"IsActive\": true,",
									"  \"CompanyName\":\"Sté&Co-\"+now,",
									"  \"TradeName\": \"societe\"+now,",
									"  \"LegalFormReference\": \"0FSXMQN3\",",
									"  \"IdType\": 0,",
									"  \"LegalId\": \"118956211\",",
									"  \"Nic\": \"\",",
									"  \"VatNumber\": \"FR52324598\",",
									"  \"Capital\": 500000.00,",
									"  \"CurrencyReference\": \"00000000\",",
									"  \"Address1\": \"16 place\",",
									"  \"Address2\": \"de la carriere\",",
									"  \"Address3\": \"\",",
									"  \"ZipCode\": \"5400\",",
									"  \"City\": \"NancY\",",
									"  \"CountryReference\": \"EUFRANCE\",",
									"  \"Phone\": \"+33(0)1-02-03-04-05\",",
									"  \"Language\": \"FR\",",
									"  \"ContractSignatureDate\": signatureDate,",
									"  \"ContractNumber\": \"123-ABC999\",",
									"  \"OpeningDate\": openingDate,",
									"  \"FiscalPeriodType\": 10,",
									"  \"FiscalPeriodStart\": \"01/01\",",
									"  \"FiscalPeriodEnd\": \"31/12\"",
									"}",
									"pm.globals.set(\"NewSubsidiaryData\",JSON.stringify(subsidiaryData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "49876b70-7846-4c0e-8df0-c4aeaf6eaa32",
								"type": "text/javascript",
								"exec": [
									"var moment= require('moment')",
									"var responseData = JSON.parse(responseBody);",
									"",
									"pm.globals.set('NewSubsidiaryRef', responseData.Reference);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"New subsidiary informations are sent\",function(){",
									"   pm.expect(responseData).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Informations sent back are correct\",function(){",
									"    var postedData = JSON.parse (pm.globals.get('NewSubsidiaryData'));",
									"    pm.expect(responseData.TenantReference).to.be.equal(postedData.TenantReference);",
									"    pm.expect(responseData.IsActive).to.be.equal(true);",
									"    pm.expect(responseData.Code).not.to.be.equal(null);",
									"    pm.expect(responseData.CompanyName).to.be.equal(postedData.CompanyName);",
									"    pm.expect(responseData.TradeName).to.be.equal(postedData.TradeName);",
									"    pm.expect(responseData.LegalFormReference).to.be.equal(postedData.LegalFormReference);",
									"    pm.expect(responseData.IdType).to.be.equal(postedData.IdType);",
									"    pm.expect(responseData.LegalId).to.be.equal(postedData.LegalId);",
									"    pm.expect(responseData.Nic).to.be.equal(postedData.Nic);",
									"    pm.expect(responseData.VatNumber).to.be.equal(postedData.VatNumber);",
									"    pm.expect(responseData.Capital).to.be.equal(postedData.Capital);",
									"    pm.expect(responseData.CurrencyReference).to.be.equal(postedData.CurrencyReference);",
									"    pm.expect(responseData.Adress1).to.be.equal(postedData.Adress1);",
									"    pm.expect(responseData.Adress2).to.be.equal(postedData.Adress2);",
									"    pm.expect(responseData.Adress3).to.be.equal(postedData.Adress3);",
									"    pm.expect(responseData.ZipCode).to.be.equal(postedData.ZipCode);",
									"    pm.expect(responseData.City).to.be.equal(postedData.City);",
									"    pm.expect(responseData.CountryReference).to.be.equal(postedData.CountryReference);",
									"    pm.expect(responseData.Phone).to.be.equal(postedData.Phone);",
									"    pm.expect(responseData.Language).to.be.equal(postedData.Language);",
									"    var m1 = moment(responseData.ContractSignatureDate);",
									"    pm.expect(m1.isValid()).to.be.equals(true);",
									"",
									"    var m2 = moment(responseData.OpeningDate);",
									"    pm.expect(m2.isValid()).to.be.equals(true);",
									"    //Ensure diff between date is 1 month",
									"    //FIXME : not working !",
									"    //pm.expect(moment.duration(m1.diff(m2,'month'))).to.be.equal(1);",
									"    pm.expect(responseData.ContractNumber).to.be.equal(postedData.ContractNumber);",
									"    pm.expect(responseData.FiscalPeriodType).to.be.equal(postedData.FiscalPeriodType);",
									"    pm.expect(responseData.FiscalPeriodStart).to.be.equal(postedData.FiscalPeriodStart);",
									"    pm.expect(responseData.FiscalPeriodEnd).to.be.equal(postedData.FiscalPeriodEnd);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CurrentLanguage",
								"value": "fr"
							},
							{
								"key": "CurrentSubsidiary",
								"value": "{{CurrentSubsidiary}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{NewSubsidiaryData}}"
						},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/subsidiaries",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"subsidiaries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Subsidiary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fe7302d-b225-4b09-9201-96818d236898",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse(responseBody)",
									"var moment= require('moment')",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New subsidiary informations are sent\",function(){",
									"   pm.expect(responseData).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Informations sent back are correct\",function(){",
									"    var postedData = JSON.parse (pm.globals.get('NewSubsidiaryData'));",
									"    pm.expect(responseData.TenantReference).to.be.equal(postedData.TenantReference);",
									"    pm.expect(responseData.IsActive).to.be.equal(postedData.IsActive);",
									"    pm.expect(responseData.Code).not.to.be.equal(null);",
									"    pm.expect(responseData.CompanyName).to.be.equal(postedData.CompanyName);",
									"    pm.expect(responseData.TradeName).to.be.equal(postedData.TradeName);",
									"    pm.expect(responseData.LegalFormReference).to.be.equal(postedData.LegalFormReference);",
									"    pm.expect(responseData.IdType).to.be.equal(postedData.IdType);",
									"    pm.expect(responseData.LegalId).to.be.equal(postedData.LegalId);",
									"    pm.expect(responseData.Nic).to.be.equal(postedData.Nic);",
									"    pm.expect(responseData.VatNumber).to.be.equal(postedData.VatNumber);",
									"    pm.expect(responseData.Capital).to.be.equal(postedData.Capital);",
									"    pm.expect(responseData.CurrencyReference).to.be.equal(postedData.CurrencyReference);",
									"    pm.expect(responseData.Address1).to.be.equal(postedData.Address1);",
									"    pm.expect(responseData.Address2).to.be.equal(postedData.Address2);",
									"    pm.expect(responseData.Address3).to.be.equal(postedData.Address3);",
									"    pm.expect(responseData.ZipCode).to.be.equal(postedData.ZipCode);",
									"    pm.expect(responseData.City).to.be.equal(postedData.City);",
									"    pm.expect(responseData.CountryReference).to.be.equal(postedData.CountryReference);",
									"    pm.expect(responseData.Phone).to.be.equal(postedData.Phone);",
									"    pm.expect(responseData.Language).to.be.equal(postedData.Language);",
									"    var m1 = moment(responseData.ContractSignatureDate);",
									"    pm.expect(m1.isValid()).to.be.equals(true);",
									"    var m2 = moment(responseData.OpeningDate);",
									"    pm.expect(m2.isValid()).to.be.equals(true);",
									"    pm.expect(responseData.ContractNumber).to.be.equal(postedData.ContractNumber);",
									"    pm.expect(responseData.FiscalPeriodType).to.be.equal(postedData.FiscalPeriodType);",
									"    pm.expect(responseData.FiscalPeriodStart).to.be.equal(postedData.FiscalPeriodStart);",
									"    pm.expect(responseData.FiscalPeriodEnd).to.be.equal(postedData.FiscalPeriodEnd);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CurrentLanguage",
								"value": "fr"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/subsidiaries/:subsidiaryReference",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"subsidiaries",
								":subsidiaryReference"
							],
							"variable": [
								{
									"key": "subsidiaryReference",
									"value": "{{NewSubsidiaryRef}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tenant Subsidiaries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abd5d399-2462-4812-bf7e-4a32a871a767",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse(responseBody);",
									"var moment = require('moment');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test (\"There is at least 4 results\", function(){",
									"    pm.expect (responseData.length).to.be.above(3);",
									"})",
									"",
									"var postedData= JSON.parse(pm.globals.get('NewSubsidiaryData'));",
									"var specificSubs = _.filter(responseData,{'Reference':pm.globals.get('NewSubsidiaryRef')});",
									"",
									"pm.test(\"Results contains subsidiary '\"+postedData.CompanyName+\"'\", function(){",
									"    pm.expect(specificSubs.length).to.be.equal(1);",
									"});",
									"",
									"",
									"pm.test(\"Data for subsidiary '\"+postedData.CompanyName+\"' are correct\", function(){",
									"    var postedData = JSON.parse (pm.globals.get('NewSubsidiaryData'));",
									"    pm.expect(specificSubs[0].Code).not.to.be.equal(null);",
									"    pm.expect(specificSubs[0].CompanyName).to.be.equal(postedData.CompanyName);",
									"    pm.expect(specificSubs[0].IsActive).to.be.equal(postedData.IsActive);",
									"    var m1 = moment(specificSubs[0].CreationDate);",
									"    pm.expect(m1.isValid()).to.be.equals(true);",
									"    pm.expect(specificSubs[0].CurrencyCode).to.be.equal(\"EUR\");",
									"    pm.expect(specificSubs[0].IsDunningModuleActived).to.be.equal(false);",
									"    pm.expect(specificSubs[0].IsCreditInsuranceModuleActived).to.be.equal(false);",
									"    pm.expect(specificSubs[0].IsFactoringModuleActived).to.be.equal(false);",
									"    pm.expect(specificSubs[0].AttachedPortfoliosCount).to.be.equal(0);",
									"    pm.expect(specificSubs[0].AttachedPortfolios).to.be.eql(null);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/json, application/xml, text/xml",
								"disabled": true
							},
							{
								"key": "CurrentLanguage",
								"value": "fr"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/tenants/:reference/subsidiaries",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"tenants",
								":reference",
								"subsidiaries"
							],
							"variable": [
								{
									"key": "reference",
									"value": "{{CurrentTenant}}"
								}
							]
						},
						"description": "Ensure newly create subsidiary is linked to tenants"
					},
					"response": []
				},
				{
					"name": "Update Subsidiary",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f52bd56c-5712-4261-9104-8e591a21bc9e",
								"type": "text/javascript",
								"exec": [
									"var now =Date.now();",
									"",
									"var newCieName = \"MyNewCompanie\"+now;",
									"var newTradeName = \"Société \"+now;",
									"",
									"var subsidiaryUpdatedData =",
									"{ ",
									"  \"TenantReference\":pm.environment.get(\"CurrentTenant\"),",
									"  \"IsActive\": true,",
									"  \"Code\": \"RSEGQ5WUYC\",",
									"  \"CompanyName\": newCieName,",
									"  \"TradeName\": newTradeName,",
									"  \"LegalFormReference\": \"QZKRXJPA\",",
									"  \"IdType\": 1,",
									"  \"LegalId\": \"118156478\",",
									"  \"Nic\": \"027\",",
									"  \"VatNumber\": \"FR52525252\",",
									"  \"Capital\": 50000.00,",
									"  \"CurrencyReference\": \"DM8PJ33P\",",
									"  \"Address1\": \"16 place\",",
									"  \"Address2\": \"de la carrière\",",
									"  \"Address3\": \"complement adresse 3 \",",
									"  \"ZipCode\": \"54000\",",
									"  \"City\": \"NancY\",",
									"  \"CountryReference\": \"EUFRANCE\",",
									"  \"Phone\": \"+33(0)1-02-03-04-05\",",
									"  \"Language\": \"FR\",",
									"  \"ContractSignatureDate\": \"2018-04-18T11:51:46.618\",",
									"  \"OpeningDate\": \"2018-05-18T11:51:46.618\",",
									"  \"ContractNumber\": \"AAA89-AAZZ\",",
									"  \"FiscalPeriodType\": 10,",
									"  \"FiscalPeriodStart\": \"01/01\",",
									"  \"FiscalPeriodEnd\": \"31/12\"",
									"}",
									"pm.globals.set(\"UpdatedSubsidiaryData\",JSON.stringify(subsidiaryUpdatedData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "28f8237e-daad-40ae-9f2e-8dc561c166db",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse(responseBody);",
									"var moment= require('moment')",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Updated subsidiary informations are sent\",function(){",
									"   pm.expect(responseData).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Informations sent back are correct\",function(){",
									"   var postedData = JSON.parse (pm.globals.get('UpdatedSubsidiaryData'));",
									"   //TODO verify all fields....",
									"    pm.expect(responseData.Reference).to.be.equal(pm.globals.get('NewSubsidiaryRef'));",
									"    pm.expect(responseData.TenantReference).to.be.equal(pm.environment.get('CurrentTenant'));",
									"    pm.expect(responseData.IsActive).to.be.equal(postedData.IsActive);",
									"    pm.expect(responseData.Code).not.to.be.equal(null);",
									"    pm.expect(responseData.CompanyName).to.be.equal(postedData.CompanyName);",
									"    pm.expect(responseData.TradeName).to.be.equal(postedData.TradeName);",
									"    pm.expect(responseData.LegalFormReference).to.be.equal(postedData.LegalFormReference);",
									"    pm.expect(responseData.IdType).to.be.equal(postedData.IdType);",
									"    pm.expect(responseData.LegalId).to.be.equal(postedData.LegalId);",
									"    pm.expect(responseData.Nic).to.be.equal(postedData.Nic);",
									"    pm.expect(responseData.VatNumber).to.be.equal(postedData.VatNumber);",
									"    pm.expect(responseData.Capital).to.be.equal(postedData.Capital);",
									"    pm.expect(responseData.CurrencyReference).to.be.equal(postedData.CurrencyReference);",
									"    pm.expect(responseData.Address1).to.be.equal(postedData.Address1);",
									"    pm.expect(responseData.Address2).to.be.equal(postedData.Address2);",
									"    pm.expect(responseData.Address3).to.be.equal(postedData.Address3);",
									"    pm.expect(responseData.ZipCode).to.be.equal(postedData.ZipCode);",
									"    pm.expect(responseData.City).to.be.equal(postedData.City);",
									"    pm.expect(responseData.CountryReference).to.be.equal(postedData.CountryReference);",
									"    pm.expect(responseData.Phone).to.be.equal(postedData.Phone);",
									"    pm.expect(responseData.Language).to.be.equal(postedData.Language);",
									"    pm.expect(responseData.ContractSignatureDate).to.be.equal(postedData.ContractSignatureDate);",
									"    var m1 = moment(responseData.ContractSignatureDate);",
									"    pm.expect(m1.isValid()).to.be.equals(true);",
									"    pm.expect(responseData.OpeningDate).to.be.equal(postedData.OpeningDate);",
									"    var m2 = moment(responseData.OpeningDate);",
									"    pm.expect(m2.isValid()).to.be.equals(true);",
									"    pm.expect(responseData.ContractNumber).to.be.equal(postedData.ContractNumber);",
									"    pm.expect(responseData.OpeningDate).to.be.equal(postedData.OpeningDate);",
									"    pm.expect(responseData.FiscalPeriodType).to.be.equal(postedData.FiscalPeriodType);",
									"    pm.expect(responseData.FiscalPeriodStart).to.be.equal(postedData.FiscalPeriodStart);",
									"    pm.expect(responseData.FiscalPeriodEnd).to.be.equal(postedData.FiscalPeriodEnd);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "CurrentLanguage",
								"value": "fr"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{UpdatedSubsidiaryData}}"
						},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/subsidiaries/:subsidiaryReference",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"subsidiaries",
								":subsidiaryReference"
							],
							"variable": [
								{
									"key": "subsidiaryReference",
									"value": "{{NewSubsidiaryRef}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Subsidiaries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6f51aae-5a62-45c6-820b-0e99634e27f5",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse (responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Number of elements is 3\", function(){",
									"    pm.expect(responseData.length).to.be.equals(3);",
									"})",
									"",
									"",
									"var expectedSubs =[\"S21-TestBack\",\"S22-TestBack\",\"S23-TestBack\"];",
									"_.each (expectedSubs, function (sub){",
									"    isPresent =_.filter (responseData,{\"CompanyName\":sub});",
									"    pm.test(\"Results contains correct subsidiary \"+ sub, function(){",
									"        pm.expect(isPresent.length).to.be.equal(1);",
									"        ",
									"    });",
									"});",
									"",
									"    ",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CurrentLanguage",
								"value": "fr"
							},
							{
								"key": "CurrentSubsidiary",
								"value": "{{CurrentSubsidiary}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/users/:userReference/subsidiaries",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"users",
								":userReference",
								"subsidiaries"
							],
							"variable": [
								{
									"key": "userReference",
									"value": "{{UserRef}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Language",
			"description": "",
			"item": [
				{
					"name": "Get Translations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83736688-2d37-49ac-82a7-20cb7ba17d7c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"There is some results\", function(){",
									"    pm.expect(responseBody.length).to.be.above(0);",
									"})",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/json, application/xml, text/xml"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/translations/:language",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"translations",
								":language"
							],
							"variable": [
								{
									"key": "language",
									"value": "FR"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  Supported Languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd8e5421-896a-4472-a1ee-08988edb52ee",
								"type": "text/javascript",
								"exec": [
									"",
									"var responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Number of elements is 2\", function(){",
									"    pm.expect(responseData.length).to.be.equals(2);",
									"});",
									"",
									"pm.test(\"Results contains correct data for FR language\", function(){",
									"    var FR = _.filter (responseData,{Code:'FR'});",
									"    pm.expect(FR[0].Code).to.be.equals('FR');",
									"    pm.expect(FR[0].EnglishDescription).to.be.equals('French');",
									"    pm.expect(FR[0].LocaleDescription).to.be.equals('Français');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/json, application/xml, text/xml"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/translations/SupportedLanguages",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"translations",
								"SupportedLanguages"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "848466c0-082f-4f9f-8df3-2def1e58bf60",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3d21f020-0144-4a4e-b876-2f6294c7a50a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Country",
			"description": "",
			"item": [
				{
					"name": "Get Countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42b9639c-ac8e-414e-a855-17430caf34d2",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse (responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test (\"There is 250 results\", function(){",
									"    pm.expect(responseData.length).to.be.equal(250);",
									"})",
									"",
									"pm.test(\"Data for country 'FRANCE' are present and correct\",function(){",
									"    var france = _.filter(responseData, {'Reference':'EUFRANCE'});",
									"    console.log(france);",
									"    pm.expect(france.length).to.be.equal(1);",
									"    pm.expect(france[0].Code).to.be.equal('FRA');",
									"    pm.expect(france[0].CodeIso2).to.be.equal('FR');",
									"    pm.expect(france[0].Name).to.be.equal('France');",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CurrentSubsidiary",
								"value": "{{CurrentSubsidiary}}"
							},
							{
								"key": "CurrentLanguage",
								"value": "fr"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/countries",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"countries"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "LegalForms",
			"description": "",
			"item": [
				{
					"name": "Get legalForms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ccb61788-121e-4034-b020-c5698177ed8e",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test (\"There is 5 results\", function(){",
									"    pm.expect(responseData.length).to.be.equal(5);",
									"});",
									"",
									"pm.test(\"All legal form are returned\", function(){",
									"  var legalForms = ['Autre forme juridique','Société à responsabilité limitée','Société anonyme','Société par actions simplifiée','Société par actions simplifiée unipersonnelle'];",
									"  _.each(legalForms, function(legalform) {",
									"      var current = _.filter(responseData, {'Name':legalform});",
									"      pm.expect(current.length).to.be.equal(1);",
									"  });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CurrentLanguage",
								"value": "fr"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/legalForms",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"legalForms"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "26235f19-c0e1-4326-a860-5b3f7b967816",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1c90e60d-d768-469b-87fa-8ee6fae4abe2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Enums",
			"description": "",
			"item": [
				{
					"name": "Get FiscalPeriod",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "064dd5f6-e4e7-475b-89b8-d69b681bdbfd",
								"type": "text/javascript",
								"exec": [
									"var responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test (\"Data are correct\",function(){",
									"    var expected ={",
									"    \"10\": \"Année civile\",",
									"    \"20\": \"Autre période\"",
									"};",
									"pm.expect(responseData).to.be.eql(expected)",
									"    ",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "CurrentLanguage",
								"value": "fr"
							}
						],
						"body": {},
						"url": {
							"raw": "{{CoreURL}}/api/configuration/enums/FiscalPeriods",
							"host": [
								"{{CoreURL}}"
							],
							"path": [
								"api",
								"configuration",
								"enums",
								"FiscalPeriods"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{newToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7c95066e-ba35-4d91-bb6d-1ef33e76a0c3",
				"type": "text/javascript",
				"exec": [
					"",
					"const userTokenRequest = {",
					"    url: pm.environment.get(\"CoreURL\")+'/api/configuration/users/Tokens',",
					"    method: 'POST',",
					"    header: 'Content-type:application/json',",
					"    body: {",
					"        mode: 'raw',",
					"        raw:JSON.stringify( {",
					"            Login: pm.environment.get('User'),",
					"            Password : pm.environment.get('Password')",
					"        })",
					"    }",
					"};",
					"",
					"pm.sendRequest(userTokenRequest, function(err, response) {",
					"        pm.globals.set('newToken',response.json());",
					"      console.log(err ? err : response.json());",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c5c69935-c85f-459c-bab9-414d788f3372",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "028e8e90-163f-44e2-ad2c-48d13976674a",
			"key": "responseTime",
			"value": "150",
			"type": "string",
			"description": ""
		}
	]
}